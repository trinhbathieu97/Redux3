{"version":3,"sources":["store/index.js","components/navbar.js","components/ToForm.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["GetTodo","createAsyncThunk","a","axios","get","response","data","Addtodo","title","NewTodo","id","nanoid","completed","post","todoSlice","createSlice","name","initialState","allTodo","reducers","ComPleted","state","action","map","todo","payload","DeLeTeTodo","filter","extraReducers","fulfilled","console","log","unshift","TodoReduce","reducer","store","configureStore","GiaTriStore","actions","todoSelector","Navbar","useSelector","className","length","ToForm","dispatch","useDispatch","useState","setTitle","onSubmit","event","preventDefault","type","required","value","onChange","target","Todos","todos","LatCompled","deleteTodo","abc","useEffect","checked","bind","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee1cddb3.chunk.js","sourcesContent":["import {createAsyncThunk, createSlice,nanoid} from '@reduxjs/toolkit'\nimport { configureStore } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nexport const GetTodo = createAsyncThunk('todo/FaceTodo', async () =>{\n    const response = await axios.get('https://jsonplaceholder.typicode.com/todos?_limit=5')\n    return response.data\n})\nexport const Addtodo = createAsyncThunk('todo/Addface', async title =>{\n    const NewTodo = {\n        id: nanoid(),\n        title,\n        completed:false\n\n    }\n    await axios.post('https://jsonplaceholder.typicode.com/todos',NewTodo)\n    return NewTodo\n\n})\n\nconst todoSlice = createSlice({\n    name:'todo',\n    initialState:{\n        allTodo:[\n            {\n                id:1,\n                title: 'Cong Viec 1',\n                completed: false\n            },\n            {\n                id:2,\n                title: 'Cong Viec 2',\n                completed: false\n            },\n            {\n                id:3,\n                title: 'Cong Viec 3',\n                completed: false\n            }\n        ]\n    },\n    reducers:{\n        // Addtodo:(state,action) =>{\n        //     state.allTodo.push({\n        //         id:nanoid(),\n        //         title:action.payload,\n        //         completed:false\n        //     })\n        // },\n        ComPleted:(state,action)=>{\n        //    const todoID = action.payload\n            state.allTodo = state.allTodo.map(todo => {\n                if(todo.id === action.payload) todo.completed = !todo.completed\n                return todo\n            })\n        },\n        DeLeTeTodo:(state,action) =>{\n            state.allTodo = state.allTodo.filter(todo => todo.id !== action.payload)\n        },\n        // ApiTodo:(state,action) =>{\n        //     state.allTodo = action.payload\n        // }\n        \n        },\n        extraReducers:{\n            [GetTodo.fulfilled]:(state,action) =>{\n                console.log('Done')\n                state.allTodo = action.payload\n            },\n            [Addtodo.fulfilled]:(state,action) =>{\n                state.allTodo.unshift(action.payload)\n            }\n        }\n\n    \n})\n// reducer create\n// export const GetTodo = () =>{\n//     const all = async dispatch =>{\n//         try {\n//           const response = await axios.get('https://jsonplaceholder.typicode.com/todos')\n//           dispatch(ApiTodo(response.data))\n//         } catch (error) {\n//             console.log('loi')\n//         }\n        \n//     }\n//     return all\n// }\n\n//reduce\nconst TodoReduce = todoSlice.reducer\n\n// Store\nconst store = configureStore({\n    reducer:{\n        GiaTriStore:TodoReduce\n    }\n})\nexport const {ComPleted,DeLeTeTodo} = todoSlice.actions\n/// lay gia tri store cho component\nexport const todoSelector = state => state.GiaTriStore.allTodo\n\nexport default store","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { todoSelector } from '../store'\nconst Navbar = () => {\n    const todo = useSelector(todoSelector)\n    return (\n        <div className = 'navbar'>\n            <h1>My React App ReDuxx</h1>\n            <ul>\n                <li>Home <i className = 'ti-angle-down'></i></li>\n                <li>About</li>\n                <li>Total Todos:{todo.length}</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Navbar\n","import React,{useState}from 'react'\nimport { Addtodo } from '../store'\nimport { useDispatch } from 'react-redux'\n\nconst ToForm = () => {\n    const dispatch = useDispatch()\n    const [title,setTitle] = useState(\"\")\n\n    const GiatriNhap = (event)=>{\n        setTitle(event.target.value)\n    }\n    const NhapGiaTri = (event)=>{\n        event.preventDefault()\n        dispatch(Addtodo(title))\n        setTitle('')\n    }\n\n    return (\n        <div>\n            <form onSubmit = {NhapGiaTri}>\n                <input type=\"text\"  required value={title} onChange={GiatriNhap}/>\n                <input type=\"submit\" />\n            </form>\n        </div>\n    )\n}\n\nexport default ToForm\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport { todoSelector } from '../store'\nimport ToForm from './ToForm'\nimport { useDispatch } from 'react-redux'\nimport { ComPleted} from '../store'\nimport { DeLeTeTodo,GetTodo } from '../store'\nimport { useEffect } from 'react'\n\n\n\nconst Todos = () => {\n    const todos = useSelector(todoSelector)\n    const dispatch = useDispatch()\n\n    const LatCompled = (id)=>{\n        dispatch(ComPleted(id))\n    }\n\n    const deleteTodo = (abc)=>{\n        dispatch(DeLeTeTodo(abc))\n\n    }\n    useEffect(()=>{\n            dispatch(GetTodo())\n    },[dispatch])\n    \n    \n    \n     \n    return (\n        <div className='todo-list'>\n            <ToForm />\n\n            <ul>\n                {\n                    todos.map(todo => <li key = {todo.id} className = {todo.completed ? 'completed':\"\"}>\n                        {todo.title}\n                        <input type=\"checkbox\" checked = {todo.completed} onChange = {LatCompled.bind(this, todo.id)}/>\n                        <button onClick = {deleteTodo.bind(this, todo.id)}>delete</button>\n                        </li>)\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default Todos\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/navbar';\nimport Todos from './components/Todos';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Navbar />\n     <Todos />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}